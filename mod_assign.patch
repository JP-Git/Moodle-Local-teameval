diff --git a/mod/assign/classes/evaluation_context.php b/mod/assign/classes/evaluation_context.php
new file mode 100644
index 00000000000..14770d7cce6
--- /dev/null
+++ b/mod/assign/classes/evaluation_context.php
@@ -0,0 +1,141 @@
+<?php
+
+namespace mod_assign;
+
+class evaluation_context extends \local_teameval\evaluation_context {
+
+    protected $assign;
+
+    public function __construct(\assign $assign) {
+        $this->assign = $assign;
+        parent::__construct($assign->get_course_module());
+    }
+
+    public function evaluation_permitted($userid = null) {
+        $enabled = $this->assign->get_instance()->teamsubmission && $this->assign->get_instance()->preventsubmissionnotingroup && parent::evaluation_permitted($userid);
+        if ($enabled && $userid) {
+            if ($this->assign->is_any_submission_plugin_enabled()) {
+                $groupsub = $this->assign->get_group_submission($userid, 0, false);
+                if (($groupsub == false) ||
+                    ($groupsub->status != ASSIGN_SUBMISSION_STATUS_SUBMITTED) ||
+                    ($this->assign->submission_empty($groupsub))) {
+                    $enabled = false;
+                }
+            } else {
+                $grade = $this->assign->get_user_grade($userid, false);
+                if (!($grade && $grade->grade !== null && $grade->grade >= 0)) {
+                    $enabled = false;
+                }
+            }
+        }
+        return $enabled;
+
+    }
+
+    public function default_deadline() {
+        $duedate = $this->assign->get_instance()->duedate;
+        if ($duedate) {
+            // By default, due date plus seven days
+            return $duedate + 604800;
+        } else {
+            // otherwise one week after the assignment was created
+            return $this->cm->added + 604800;
+        }
+    }
+
+    public function minimum_deadline() {
+        return $this->assign->get_instance()->duedate;
+    }
+
+    public function group_for_user($userid) {
+        return $this->assign->get_submission_group($userid);
+    }
+
+    public function all_groups() {
+        $grouping = $this->assign->get_instance()->teamsubmissiongroupingid;
+        $groups = groups_get_all_groups($this->assign->get_course()->id, 0, $grouping);
+        return $groups;
+    }
+
+    public function marking_users($fields = 'u.id') {
+        $grouping = $this->assign->get_instance()->teamsubmissiongroupingid;
+
+        $groups = groups_get_all_groups($this->assign->get_course()->id, 0, $grouping, 'g.id');
+
+        // we want only group IDs
+        $groups = array_keys($groups);
+
+        $ctx = $this->assign->get_context();
+
+        return get_users_by_capability($ctx, 'local/teameval:submitquestionnaire', $fields, '', '', '', $groups);
+    }
+
+    public function grade_for_group($groupid) {
+        static $cached_grades = [];
+        //TODO: you can actually assign different grades for everyone
+        //check if that has happened
+
+        if (isset($cached_grades[$groupid])) {
+            return $cached_grades[$groupid];
+        }
+
+        // get any user from this group
+        $mems = groups_get_members($groupid, 'u.id');
+        $user = key($mems);
+
+        if ($user > 0) {
+            $grade = $this->assign->get_user_grade($user, false);
+            if ($grade) {
+                $cached_grades[$groupid] = $grade->grade;
+                return $grade->grade;
+            }
+        }
+
+        return null;
+    }
+
+    public function trigger_grade_update($users = null) {
+        global $DB;
+
+        // Because get_user_grades_for_gradebook doesn't work for group submissions
+        // we have to recreate its functionality ourselves
+
+        $groups = $this->all_groups();
+        if (empty($groups)) {
+            // No groups = no marks. This might have been called during setup; bail.
+            return;
+        }
+        list($groupsql, $groupparams) = $DB->get_in_or_equal(array_keys($groups), SQL_PARAMS_NAMED);
+
+        if (!empty($users)) {
+            list($usersql, $userparams) = $DB->get_in_or_equal($users, SQL_PARAMS_NAMED);
+        } else {
+            $usersql = ' != 0';
+            $userparams = [];
+        }
+
+
+        $sql = <<<SQL
+SELECT
+    g.*
+FROM
+    {assign_submission} sub
+    JOIN {groups_members} gm ON gm.groupid = sub.groupid
+    JOIN {assign_grades} g ON g.assignment = sub.assignment AND g.userid = gm.userid
+WHERE
+    sub.assignment = :assign AND
+    sub.latest = 1 AND
+    gm.groupid $groupsql AND
+    gm.userid $usersql
+SQL;
+        $params = ['assign' => $this->assign->get_instance()->id];
+        $params = array_merge($params, $groupparams, $userparams);
+
+        $grades = $DB->get_records_sql($sql, $params);
+
+        foreach($grades as $grade) {
+            $this->assign->update_grade($grade);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/mod/assign/lib.php b/mod/assign/lib.php
index 6f0d59b2994..c71c143f339 100644
--- a/mod/assign/lib.php
+++ b/mod/assign/lib.php
@@ -208,6 +208,11 @@ function assign_reset_course_form_definition(&$mform) {
         get_string('removealluseroverrides', 'assign'));
     $mform->addElement('advcheckbox', 'reset_assign_group_overrides',
         get_string('removeallgroupoverrides', 'assign'));
+
+    $teameval_plugin = core_plugin_manager::instance()->get_plugin_info('local_teameval');
+    if ($teameval_plugin) {
+        \local_teameval\evaluation_context::reset_course_form_definition($mform);
+    }
 }
 
 /**
@@ -216,9 +221,13 @@ function assign_reset_course_form_definition(&$mform) {
  * @return array
  */
 function assign_reset_course_form_defaults($course) {
-    return array('reset_assign_submissions' => 1,
+    $defaults = array('reset_assign_submissions' => 1,
             'reset_assign_group_overrides' => 1,
             'reset_assign_user_overrides' => 1);
+    $teameval_plugin = core_plugin_manager::instance()->get_plugin_info('local_teameval');
+    if ($teameval_plugin) {
+        $defaults = array_merge($defaults, \local_teameval\evaluation_context::reset_course_form_defaults($course));
+    }
 }
 
 /**
@@ -1318,6 +1327,17 @@ function assign_grade_item_update($assign, $grades=null) {
         $grades = null;
     }
 
+    $cm = get_coursemodule_from_instance('assign', $assign->id, $assign->courseid);
+    // Only update the grades in team eval if the cm exists
+    if ($cm && !is_null($grades)) {
+        $teameval_plugin = core_plugin_manager::instance()->get_plugin_info('local_teameval');
+        if ($teameval_plugin) {
+            $evalcontext = assign_get_evaluation_context($cm);
+            if ($evalcontext->evaluation_enabled()) {
+                $grades = $evalcontext->update_grades($grades);
+            }
+        }
+    }
     return grade_update('mod/assign',
                         $assign->courseid,
                         'mod',
@@ -1328,6 +1348,12 @@ function assign_grade_item_update($assign, $grades=null) {
                         $params);
 }
 
+function assign_get_evaluation_context($cm) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/assign/locallib.php');
+    $assign = new assign(context_module::instance($cm->id), $cm, null);
+    return new \mod_assign\evaluation_context($assign);
+}
 /**
  * Return grade for given user or all users.
  *
diff --git a/mod/assign/locallib.php b/mod/assign/locallib.php
index a9f0174335b..6640a6cb759 100644
--- a/mod/assign/locallib.php
+++ b/mod/assign/locallib.php
@@ -5615,6 +5615,13 @@ class assign {
             $o .= $this->view_student_summary($USER, true);
         }
 
+        $teameval_plugin = core_plugin_manager::instance()->get_plugin_info('local_teameval');
+        if ($teameval_plugin) {
+            $teameval_renderer = $PAGE->get_renderer('local_teameval');
+            $teameval = \local_teameval\output\team_evaluation_block::from_cmid($this->coursemodule->id);
+            $o .= $teameval_renderer->render($teameval);
+        }
+
         $o .= $this->view_footer();
 
         \mod_assign\event\submission_status_viewed::create_from_assign($this)->trigger();
