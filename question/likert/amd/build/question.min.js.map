{"version":3,"sources":["../src/question.js"],"names":["define","$","Question","Templates","Ajax","Strings","Editor","FormParse","LikertQuestion","container","teameval","contextid","self","editable","optional","questionID","context","apply","arguments","_self","_editable","_submissioncontext","submissioncontext","_editingcontext","editingcontext","_editinglocked","editinglocked","_meanings","pluginName","prototype","submissionContext","editingView","editForm","param","done","find","change","updateMeanings","bind","save","ordinal","form","saveAll","data","serializeObject","saveForm","result","JSON","parse","id","submit","call","marks","each","toUser","m","touser","value","push","methodname","args","teamevalid","incomplete","checkComplete","minval","parseInt","val","maxval","i","meaning","closest","addBack","removeClass","addClass","validateData","deferred","Deferred","title","trim","length","description","text","get_string","str","end","next","reject","resolve","promise","userids","users","map","v","userid","markedUsers","get","missingUsers","filter","indexOf","parent","reset","prop"],"mappings":"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","sourcesContent":["define(['jquery',\n        'local_teameval/question',\n        'core/templates',\n        'core/ajax',\n        'core/str',\n        'local_teameval/editor',\n        'local_teameval/formparse'],\n    function($, Question, Templates, Ajax, Strings, Editor, FormParse) {\n\n    function LikertQuestion(container, teameval, contextid, self, editable, optional, questionID, context) {\n        Question.apply(this, arguments);\n\n        this._self = self;\n        this._editable = editable;\n\n        context = context || {};\n        this._submissioncontext = context.submissioncontext || {};\n        this._editingcontext = context.editingcontext || {};\n        this._editinglocked = context.editinglocked || false;\n\n        this._editingcontext.teameval = this.teameval;\n\n        this._meanings = {};\n\n        this.pluginName = 'likert';\n    }\n\n    LikertQuestion.prototype = new Question();\n\n    LikertQuestion.prototype.submissionContext = function() { return this._submissioncontext; };\n\n    LikertQuestion.prototype.editingView = function() {\n        return this.editForm('\\\\teamevalquestion_likert\\\\forms\\\\settings_form',\n                             $.param(this._editingcontext),\n                             {'locked': this._editinglocked})\n        .done(function() {\n            this.container.find('[name=\"range[min]\"], [name=\"range[max]\"]').change(this.updateMeanings.bind(this));\n        }.bind(this));\n    };\n\n    LikertQuestion.prototype.save = function(ordinal) {\n        this.updateMeanings();\n\n        var form = this.container.find('form');\n        Editor.saveAll(form);\n\n        var data = FormParse.serializeObject(form);\n\n        return this.saveForm(form, ordinal, {}, function(result) {\n            this._submissioncontext = JSON.parse(result.submissionContext);\n            this._editingcontext = data;\n            this._editingcontext.id = result.id;\n        }.bind(this));\n\n    };\n\n    LikertQuestion.prototype.submit = function(call) {\n        var marks = [];\n        this.container.find('.responses tbody input[type=\"radio\"]:checked').each(function() {\n            var toUser = $(this).data('touser');\n            var m = {};\n            m.touser = toUser;\n            m.value = this.value;\n            marks.push(m);\n        });\n\n        call({\n            methodname: 'teamevalquestion_likert_submit_response',\n            args: {\n                teamevalid: this.teameval,\n                id: this.questionID,\n                marks: marks\n            }\n        });\n\n        var incomplete = this.checkComplete();\n\n        return !incomplete;\n    };\n\n    LikertQuestion.prototype.updateMeanings = function() {\n        var minval = parseInt(this.container.find('[name=\"range[min]\"]').val());\n        var maxval = parseInt(this.container.find('[name=\"range[max]\"]').val());\n\n        for (var i = 0; i <= 10; i++) {\n            var meaning = this.container.find('[name=\"meanings['+i+']\"]');\n            this._meanings[i] = meaning.val();\n\n            if (!this._editinglocked) {\n                if ((i >= minval) && (i <= maxval)) {\n                    meaning.closest('.fitem').addBack().removeClass('hidden');\n                } else {\n                    meaning.closest('.fitem').addBack().addClass('hidden');\n                }\n            }\n        }\n    };\n\n    LikertQuestion.prototype.validateData = function(form) {\n\n        var deferred = $.Deferred();\n\n        var data = FormParse.serializeObject(form);\n\n        if ((data.title.trim().length === 0) && (data.description.text.trim().length === 0)) {\n            Strings.get_string('titleordescription', 'teamevalquestion_likert').done(function(str) {\n                this.container.find('[name=title]')\n                    .closest('.control-group').addClass('error').end()\n                    .next('.help-inline').text(str);\n\n                deferred.reject();\n            }.bind(this));\n        } else {\n            deferred.resolve();\n        }\n\n        return deferred.promise();\n    };\n\n    LikertQuestion.prototype.checkComplete = function() {\n\n        var userids = this._submissioncontext.users.map(function(v) { return parseInt(v.userid); });\n\n        var markedUsers = this.container.find('input:radio:checked').map(function() { return $(this).data('touser'); }).get();\n\n        var missingUsers = userids.filter(function(v) { return markedUsers.indexOf(v) === -1; });\n\n        if (missingUsers.length > 0) {\n            this.container.parent().addClass('incomplete');\n        } else {\n            this.container.parent().removeClass('incomplete');\n        }\n\n        return (missingUsers.length > 0);\n    };\n\n    LikertQuestion.prototype.reset = function() {\n        this.container.find(\".responses tbody input[type='radio']:checked\").prop('checked', false);\n        return $.Deferred().resolve().promise();\n    };\n\n    return LikertQuestion;\n\n});"],"file":"question.min.js"}