{"version":3,"sources":["../src/question.js"],"names":["define","$","Fragment","Notification","Templates","Ajax","Question","container","teameval","contextid","self","editable","optional","questionID","prototype","submissionView","submissionTemplate","submissionContext","promise","render","done","html","js","replaceNodeContents","bind","editingView","editingTemplate","editingContext","save","delete","pluginName","promises","call","methodname","args","teamevalid","id","Deferred","resolve","submit","reset","resetSubmissionContext","editForm","form","formdata","customdata","params","JSON","stringify","loadFragment","fail","exception","submitForm","method","validateData","then","serialize","error","errorcode","saveForm","ordinal","options","callback","defaults","ordinalName","questionIDName","resolveWithID","parsed_options","extend","find","val","result"],"mappings":"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","sourcesContent":["/*\n\nThis is the interface for your question plugins' AMD module. Your plugin MUST implement a module that returns\na function whose prototype conforms to the Question interface. You MAY define other functions on your class\nfor use within your plugin.\n\n*/\n\n/**\n * Your constructor must conform to this signature, even if you do not use some of these parameters.\n *\n * @param container {jQuery} The top level of your question. Insert your content in this container.\n * @param teameval {int} The ID of the team evaluation instance. Useful to pass to web services.\n * @param self {bool} If self-evaluation is enabled.\n * @param editable {bool} If this user can edit this team evaluation. (Do not use as a replacement for guard_capability!)\n * @param questionID {int|null} The question ID for this question\n * @param context {Object|null} Context data provided by your question subclass\n */\n\ndefine(['jquery', 'core/fragment', 'core/notification', 'core/templates', 'core/ajax'],\n    function($, Fragment, Notification, Templates, Ajax) {\n\n /*eslint no-unused-vars:0*/\nfunction Question(container, teameval, contextid, self, editable, optional, questionID, context) {\n    this.teameval = teameval;\n    this.questionID = questionID;\n    this.container = container;\n    this.contextid = contextid;\n    this.optional = optional;\n}\n\n/**\n * Replace the contents of container with the submitter's view.\n * @return {Promise} A promise that resolves when the view has changed.\n */\nQuestion.prototype.submissionView = function() {\n    // Default implementation: either return a value from submissionTemplate or define your pluginName\n    var submissionTemplate = this.submissionTemplate();\n    if (submissionTemplate) {\n        var submissionContext = this.submissionContext();\n        var promise = Templates.render(submissionTemplate, submissionContext);\n        return promise.done(function(html, js) {\n            Templates.replaceNodeContents(this.container, html, js);\n        }.bind(this));\n    }\n};\n\n/**\n * Replace the contents of container with the editing view.\n * @return {Promise} A promise that resolves when the view has changed.\n */\nQuestion.prototype.editingView = function() {\n    var editingTemplate = this.editingTemplate();\n    if (editingTemplate) {\n        var editingContext = this.editingContext();\n        var promise = Templates.render(editingTemplate, editingContext);\n        promise.done(function(html, js) {\n            Templates.replaceNodeContents(this.container, html, js);\n        }.bind(this));\n        return promise;\n    }\n};\n\n/**\n * Save question data back to the database in Moodle. You must use should_update_question/update_question.\n * @param ordinal {int} The index of this question in the questionnaire. You must pass this to update_question().\n * @return {Promise} A promise that resolves with the question ID when the save is complete.\n */\nQuestion.prototype.save = function(ordinal) {};\n\n/**\n * Delete the question in Moodle. You must use should_delete_question/delete_question.\n * @return {Promise} A promise that resolves when the question has been deleted.\n */\nQuestion.prototype.delete = function() {\n    if (this.questionID && this.pluginName) {\n        var promises = Ajax.call([{\n            methodname: 'teamevalquestion_'+this.pluginName+'_delete_question',\n            args: {\n                teamevalid: this.teameval,\n                id: this.questionID\n            }\n        }]);\n\n        return promises[0];\n    }\n    // No ID, never been saved\n    return $.Deferred().resolve();\n};\n\n/**\n * Submit this response to Moodle. You should check if the user can submit using can_submit_response.\n * You MUST call the function that is passed to you as the first argument to submit(). You should call\n * this with either the arguments to an Ajax.call method (an object with \"methodname\" and \"args\"), or\n * you can call it with no arguments to indicate that no AJAX call is needed. The callback will return\n * the Promise that corresponds to your AJAX call.\n *\n * You SHOULD return a boolean true or false stating whether or not the question has been sufficiently\n * filled out to constitute being complete. If this does not make sense for your question type, you MUST\n * return true.\n *\n * Basically, your function should look like this:\n *\n *     var promise = callback({ methodname: \"my_plugin_submit_question\",\n *         args: { teamevalid: this.teameval, id: this.questionID, response: myUsersResponseData }});\n *     promise.done(function(data) {\n *         // this bit is totally optional\n *         updateDisplay(data);\n *     });\n *\n * If submission involves multiple webservice calls, you should return the one that finalises the response.\n * In other words, given a fully completed questionnaire, Team Evaluation should be able to use your\n * response to calculate scores. If you need to make calls to update your state that don't affect the\n * response, you may do so afterward, using promise.done.\n *\n * @return {bool} true if the question is complete, otherwise false\n */\nQuestion.prototype.submit = function(callback) {};\n\n/**\n * This function is called when the user hits \"Reset\". The default implementation calls resetSubmissionContext\n * and then simply re-renders the submission view.\n *\n * @return {Promise} Resolve when you're finished resetting the submission view.\n */\nQuestion.prototype.reset = function() {\n    this.resetSubmissionContext();\n    return this.submissionView();\n};\n\n// The following are convenience methods or helpers for default implementations\n\n\n// Override any of these four methods to use the built-in templating system\nQuestion.prototype.submissionTemplate = function() {\n    if (this.pluginName) {\n        return 'teamevalquestion_'+this.pluginName+'/submission_view';\n    }\n    return null;\n};\n\nQuestion.prototype.submissionContext = function() {\n    return {};\n};\n\nQuestion.prototype.editingTemplate = function() {\n    if (this.pluginName) {\n        return 'teamevalquestion_'+this.pluginName+'/editing_view';\n    }\n    return null;\n};\n\nQuestion.prototype.editingContext = function() {\n    return {};\n};\n\n// Override this to use the default implementation of reset()\nQuestion.prototype.resetSubmissionContext = function() {};\n\n\n/**\n * Convenience function to get an Ajaxform and replace the container contents with it\n * @param  {string} The fully-qualified class name of the form\n * @param  {string} The form data to feed to set_data\n * @param  {customdata} The custom data to give as a the second parameter in the form's constructor\n * @return {promise} A promise that will resolve when the fragment is loaded\n */\nQuestion.prototype.editForm = function(form, formdata, customdata) {\n    var params = {\n        'form': form,\n        'jsonformdata': JSON.stringify(formdata),\n        'customdata': JSON.stringify(customdata)\n    };\n\n    var promise = Fragment.loadFragment('local_teameval', 'ajaxform', this.contextid, params);\n\n    promise.done(function(html, js) {\n        Templates.replaceNodeContents(this.container, html, js);\n    }.bind(this));\n\n    promise.fail(Notification.exception);\n\n    return promise;\n};\n\nQuestion.prototype.submitForm = function(form, method, args) {\n    var promise = this.validateData(form).then(function() {\n\n        args.formdata = $(form).serialize();\n\n        var promises = Ajax.call([{\n            methodname: method,\n            args: args\n        }]);\n\n        return promises[0];\n\n    }.bind(this));\n\n    promise.fail(function(error) {\n\n        if (error && error.errorcode) {\n            Notification.exception(error);\n        }\n\n    }.bind(this));\n\n    return promise;\n};\n\nQuestion.prototype.saveForm = function(form, ordinal, options, callback) {\n    var defaults = {\n        ordinalName: 'ordinal',\n        questionIDName: 'id',\n        methodname: 'teamevalquestion_'+this.pluginName+'_update_question',\n        args: {'teamevalid': this.teameval},\n        resolveWithID: true\n    };\n\n    var parsed_options = $.extend({}, defaults, options);\n\n    $(form).find('[name='+parsed_options.ordinalName+']').val(ordinal);\n\n    if (this.questionID) {\n        $(form).find('[name='+parsed_options.questionIDName+']').val(this.questionID);\n    }\n\n    return this.submitForm(form, parsed_options.methodname, parsed_options.args).then(function(result) {\n        this.questionID = result.id;\n        if (callback) {\n            callback(result);\n        }\n        return parsed_options.resolveWithID ? result.id : result;\n    }.bind(this));\n};\n\nQuestion.prototype.validateData = function(form) {\n\n    return $.Deferred().resolve().promise();\n};\n\nreturn Question;\n\n});"],"file":"question.min.js"}