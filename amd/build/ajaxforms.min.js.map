{"version":3,"sources":["../src/ajaxforms.js"],"names":["define","$","ajax","notification","ajaxify","form","callback","submit","evt","preventDefault","put","bind","call","data","params","find","each","name","get","length","val","is","prop","names","split","filter","x","insertInto","i","n","lastName","promises","methodname","args","promise","done","dataCallback","window","fail","exception"],"mappings":"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","sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'], function($, ajax, notification) {\n\nreturn {\n\n    ajaxify: function(form, callback) {\n        $(form).submit(function(evt) {\n            evt.preventDefault();\n            this.put(form, callback);\n        }.bind(this));\n    },\n\n    put: function(form, callback) {\n\n        // The webservice callback to issue is stored as data-ajaxfroms-callback on the form element\n        var call = $(form).data('ajaxforms-methodname');\n\n        // We need to collect the form data. Because it might be nested, we can't just use FormData objects.\n        var params = {};\n\n        $(form).find('input, select, textarea').each(function() {\n            var name = $(this).get(0).name;\n            if ((typeof name == 'undefined') || name.length === 0) {\n                // there are some input elements without names. these will not be submitted.\n                return;\n            }\n\n            var val = $(this).val();\n\n            if($(this).is('input[type=checkbox], input[type=radio]')) {\n                // workaround for checkboxes & radio buttons\n                val = $(this).prop('checked');\n            }\n\n            // Names are nested like name[subname][subname].\n            // We can get these out with a regex split.\n            var names = name.split(/\\[([a-zA-Z0-9_-]+)\\]/);\n\n            // Thanks to the way .split works there will be empty strings in this array\n            names = names.filter(function(x) { return x.length > 0; });\n\n            // insertInto is the object we're eventually going to insert into\n            // We work our way down the names keypath until we find the right object\n            // We stop one short of the last object, hence `i < names.length - 1`\n            var insertInto = params;\n            for (var i = 0; i < names.length - 1; i++) {\n                var n = names[i];\n                if(typeof insertInto[n] === 'undefined') {\n                    insertInto[n] = {};\n                }\n                insertInto = insertInto[n];\n            }\n\n            // We stopped one short of the last object because we're going to set it now\n            var lastName = names[names.length - 1];\n            insertInto[lastName] = val;\n\n        });\n\n        var promises = ajax.call([{\n            methodname: call,\n            args: {'form': params}\n        }]);\n\n        var promise = promises[0];\n\n        if (typeof callback === 'function') {\n            callback(promise);\n        }\n\n        promise.done(function() {\n            var dataCallback = $(form).data('ajaxforms-callback');\n            if(window[dataCallback]) {\n                window[dataCallback]();\n            }\n        });\n\n        promise.fail(notification.exception);\n    }\n\n};\n});\n"],"file":"ajaxforms.min.js"}